@model IndexViewModel

<!--Header-->
<nav class="navbar navbar-light header" id="header">
    <div class="container-fluid">
        <div class="links">
            <a class="navbar-brand links" href="/" id="headerA">TODOCKER</a>
        </div>
        <div class="control">
            <div class="custom-control custom-switch">
                @{
                    string mode = "";
                    if (Model.User.Mode)
                    {
                        mode = "checked";
                    }
                }
                <input type="checkbox" class="custom-control-input" id="customSwitch1" onchange="ChangeStyle();" onclick="ChangeMode();" @mode>
                <label class="custom-control-label" for="customSwitch1" id="labelCustomSwitch1">Light Mode</label>
                <a asp-action="ModeChange" target="ModeChange" id="mode" hidden></a>
            </div>
            <div class="bell">
                <button type="button" class="btn btn-primary" id="liveToastBtn" style="border: 0px; padding: 0px; color: gray; background-color: inherit;">
                    @{
                        string modeNot = "hidden";
                        if (Model.Notifications.Count() != 0)
                        {
                            modeNot = "";
                        }
                    }
                    <span @modeNot class="position-absolute top-0 start-100 translate-middle p-1 bg-danger border border-light rounded-circle" style="/* padding-top: 0px; *//* width: 5px; *//* height: 5px; */margin-left: 18px;">
                    </span>
                    <span class="material-symbols-outlined">
                        notifications
                    </span>
                </button>
                <div class="toast-container position-fixed bottom-0 end-0 p-3" bis_skin_checked="1" style="right: 20px; min-width: 300px;">
                    <div id="liveToast" class="toast fade hide" role="alert" aria-live="assertive" aria-atomic="true" bis_skin_checked="1" style="">
                        <div class="toast-header" bis_skin_checked="1" style="justify-content: space-between; align-items: center;">
                            <svg class="bd-placeholder-img rounded me-2" width="20" height="20" xmlns="http://www.w3.org/2000/svg" aria-hidden="true" preserveAspectRatio="xMidYMid slice" focusable="false"><rect width="100%" height="100%" fill="#007aff"></rect></svg>
                            <strong class="me-auto">Today's tasks</strong>
                            <small>@DateTime.Now.ToString("t")</small>
                            <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close" style="border: 0px; padding: 0px; color: gray; background-color: inherit;">
                                <span class="material-symbols-outlined">
                                    close
                                </span>
                            </button>
                        </div>
                        @{
                            int countNotifications = 0;
                        }
                        @foreach (var item in Model.Notifications ?? Enumerable.Empty<TodoListModel>())
                        {
                            <div class="toast-body" bis_skin_checked="1">
                                <a type="button" href="/@item.Id" style="border: 0px; padding: 0px; color: gray; background-color: inherit; border-bottom: 1px solid;">
                                    @item.Title
                                </a>
                            </div>
                            countNotifications++;
                        }
                    </div>
                </div>
            </div>
            <div class="user dropdown">
                <button class="user btn btn-secondary dropdown-toggle" type="button" id="dropdownListUser" data-bs-toggle="dropdown" aria-expanded="false">
                    <img class="user" src="~/media/beared-guy02-min.jpg" />
                    <div class="info">
                        <p class="name" id="headerName">@Model.User.Name</p>
                        <p class="title">@Model.User.Email</p>
                    </div>
                </button>
                <ul class="dropdown-menu" aria-labelledby="dropdownListUser">
                    <li><a class="dropdown-item">Account</a></li>
                    <li><a class="dropdown-item" href="/Account/Logout">Log out</a></li>
                </ul>
            </div>
        </div>
    </div>
</nav>

<!--Side menu-->
<div class="side-menu" id="sideMenu">
    <div class="workspace-side-menu">
        <div class="title-workspace-side-menu">
            <div class="header-title-workspace-side-menu">
                <span class="header-title-workspace-side-menu">My Workspace</span>
            </div>
        </div>
        <div class="menu-workspace-side-menu">
            <div class="help-menu-workspace-side-menu">
                <div class="title-help-menu-workspace-side-menu">
                    <p class="title-help-menu-workspace-side-menu">
                        To-do lists
                    </p>
                </div>
                <div class="three-dotz-help-menu-workspace-side-menu">
                    <div class="dropdown">
                        <button class="btn btn-secondary dropdown-toggle" type="button" id="dropdownLists1" data-bs-toggle="dropdown" aria-expanded="false">
                            <span class="material-symbols-outlined three-dotz-help-menu-workspace-side-menu">
                                more_horiz
                            </span>
                        </button>
                        <ul class="dropdown-menu" aria-labelledby="dropdownLists1">
                            <li><a class="dropdown-item" onclick="ShowHidden('spreadsheets');">Show hidden</a></li>
                        </ul>
                    </div>
                </div>
            </div>
            <ul class="nav nav-pills flex-column">
                @foreach (var item in Model.TodoLists.OrderBy(x => x.IsHidden) ?? Enumerable.Empty<TodoListModel>())
                {
                    string hidden = "";
                    string icon = "visibility";
                    string liDrop = "Hide";
                    if (item.IsHidden == true)
                    {
                        hidden = "hidden";
                        icon = "visibility_off";
                        liDrop = "Show";
                    }
                    <li class="spreadsheets" id="li @item.Id" @hidden>
                        <div class="messages-spreadsheets">
                            <div class="item-messages-spreadsheets">
                                <div class="status-item-messages-spreadsheets">
                                    <form method="get" class="eye-status-item-messages-spreadsheets">
                                        <button type="submit" value="Send" asp-controller="Home" asp-action="Index" class="eye-status-item-messages-spreadsheets">
                                            <span class="material-symbols-outlined eye-status-item-messages-spreadsheets" id="span @item.Id">
                                                @icon
                                            </span>
                                        </button>
                                    </form>
                                    <a href="/@item.Id" class="nav-link link-dark status-item-messages-spreadsheets">
                                        <label id="todoList @item.Id" style="margin: 0px;" class="c-a">
                                            @item.Title
                                        </label>
                                    </a>
                                </div>
                                <div class="three-dotz-item-messages-spreadsheets">
                                    <div class="dropdown">
                                        <button class="btn btn-secondary dropdown-toggle drop-list" type="button" id="dropdownList1 @item.Id" data-bs-toggle="dropdown" aria-expanded="false">
                                            <span class="material-symbols-outlined three-dotz-item-messages-spreadsheets">
                                                more_horiz
                                            </span>
                                        </button>
                                        <ul class="dropdown-menu" aria-labelledby="dropdownList1">
                                            <li><a class="dropdown-item" onclick="HideList('li @item.Id', 'input @item.Id', 'span @item.Id', 'liDrop @item.Id');" id="liDrop @item.Id">@liDrop</a></li>
                                            <li><a class="dropdown-item" href="/copy/@item.Id">Copy</a></li>
                                            <li><a class="dropdown-item" href="/delete/@item.Id">Delete</a></li>
                                        </ul>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <a asp-action="HiddenList" asp-route-id="@item.Id" target="HiddenList" id="input @item.Id" hidden></a>
                    </li>
                }
            </ul>
            <div class="create">
                <div class="spreadsheets-create">
                    <div class="messages-spreadsheets-create">
                        <form method="post" class="item-messages-spreadsheets">
                            <button type="submit" value="Send" asp-controller="Home" asp-action="AddList" class="btn item-messages-spreadsheets-create">
                                Create new
                                <div class="plus-circle-item-messages-spreadsheets-create">
                                    <span class="material-symbols-outlined plus-circle-item-messages-spreadsheets-create">
                                        add_circle
                                    </span>
                                </div>
                            </button>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!--Main image-->
<div class="img-main">
    <figure>
        <img src="media/rectangle-main.jpg" />
    </figure>
</div>

<!--Main page-->
<div class="main">
    <div class="header-main">
        <div style="padding-bottom: 10px;">
            @{
                var firstList = @Model.TodoLists.FirstOrDefault(x => x.Id == ViewBag.Id);
                string headerTitle = "";
                string headerDescription = "";
                if (firstList != null)
                {
                    headerTitle = firstList.Title;
                    headerDescription = firstList.Description;
                }
            }
            <form method="post" asp-controller="Home" asp-action="ChangeList" onchange="ChangeTitleTodoList('todoList @ViewBag.Id', 'listTitle')" target="ChangeList">
                <textarea name="title" id="listTitle" class="title-header-main" onchange="this.form.submit()" minlength="3" maxlength="50">@headerTitle</textarea>
                <textarea name="description" id="listDescription" class="description-header-main" onchange="this.form.submit()" maxlength="500">@headerDescription</textarea>
                <input type="hidden" value="@ViewBag.Id" name="id" />
            </form>
        </div>
        <div class="progress" id="progress">
            @{
                string precentProgressBar = "0.00";
                double countNoDone = 0;
                double countTask = 0;
            }
            @foreach (var item in Model.TodoItems ?? Enumerable.Empty<TodoItemModel>())
            {
                if (item.Status == TodoItemStatus.Completed)
                {
                    countNoDone++;
                }

                countTask++;
            }
            @{
                if (countTask != 0)
                {
                    precentProgressBar = String.Format("{0:N2}", countNoDone * 100 / countTask);
                }
                precentProgressBar = "0";
                countNoDone = 0;
            }
            <div class="progress-bar" role="progressbar" style="width: @precentProgressBar%;" aria-valuenow="@precentProgressBar" aria-valuemin="0" aria-valuemax="100" id="progressBar">
                @precentProgressBar%
            </div>
        </div>
    </div>
    <div class="table-main" id="tableMain">
        <div class="settings-table-main">
            <div>
                <form method="post">
                    <button id="createNew" class="btn item-buttons-settings-table-main" type="submit" style="display: flex;" value=" Send" asp-controller="Home" asp-action="AddItem">
                        <div style="padding-right: 5px; padding-top: 1px;">
                            <span class="material-symbols-outlined " style="font-size: 19px;" id="addCircle1">
                                add_circle
                            </span>
                        </div>
                        Create new
                    </button>
                    <input type="hidden" name="id" value="@ViewBag.Id" />
                </form>
            </div>
            <div style="display: contents;">
                <form method="get" asp-controller="Home" asp-action="Filter" style="display: contents;">
                    @{
                        if (ViewBag.Sort == null)
                        {
                            ViewBag.Sort = "order";
                            ViewBag.Group = "groupBy";
                            ViewBag.Filter = "all";
                        }
                    }
                    <div>
                        <select class="form-select item-buttons-settings-table-main b-0" name="sortBy" onchange="this.form.submit();" id="sortBy">
                            <option value="@ViewBag.Sort" hidden selected>Sort By: @ViewBag.Sort</option>
                            <option value="order">Sort By: order</option>
                            <option value="title">Sort By: title</option>
                            <option value="description">Sort By: description</option>
                            <option value="duedate">Sort By: due date</option>
                            <option value="createdate">Sort By: creation date</option>
                            <option value="status">Sort By: status</option>
                        </select>
                    </div>
                    <div>
                        <select class="form-select item-buttons-settings-table-main b-0" name="groupBy" onchange="this.form.submit();" id="groupBy">
                            <option value="@ViewBag.Group" hidden selected>Group By: @ViewBag.Group</option>
                        </select>
                    </div>
                    <div>
                        <select class="form-select item-buttons-settings-table-main b-0" name="filterBy" onchange="this.form.submit();" id="filterBy">
                            <option value="@ViewBag.Filter" hidden selected>Filter By: @ViewBag.Filter</option>
                            <option value="all">Filter By: all</option>
                            <option value="completed">Filter By: completed</option>
                            <option value="inProgress">Filter By: in progress</option>
                            <option value="notStarted">Filter By: not started</option>
                        </select>
                    </div>
                    <input type="number" value="@ViewBag.Id" name="id" hidden />
                </form>
            </div>
        </div>
        <table class="table border-top border-bottom" id="table">
            <thead>
                <tr>
                    <th scope="col" id="col-numer"></th>
                    <th scope="col" id="col-done">Done</th>
                    <th scope="col" id="col-title">Title</th>
                    <th scope="col" id="col-description">Description</th>
                    <th scope="col" id="col-due-date">Due Date</th>
                    <th scope="col" id="col-create-date">Creation Date</th>
                    <th scope="col" id="col-status">Status</th>
                    <th scope="col" id="col-dotz"></th>
                </tr>
            </thead>
            <tbody>
                @{
                    int i = 1;
                }
                @foreach (var item in Model.TodoItems ?? Enumerable.Empty<TodoItemModel>())
                {
                    <tr>
                        <td id="col-numer" class="c" scope="row">@i</td>
                        <form method="post" asp-controller="Home" asp-action="ChangeItem" target="ChangeItem">
                        <td id="col-done">
                            <div class="form-check checkbox-table-main">
                                    @{
                                        string check = "";

                                        if (item.Status == TodoItemStatus.Completed)
                                        {
                                            check = "checked";
                                        }
                                    }
                                <input class="form-check-input" type="checkbox" value="" id="flexCheckDefault @item.Id" onchange="ChangeStatus('flexCheckDefault @item.Id', 'selectMenuButton1 @item.Id');" @check>
                            </div>
                        </td>
                        <td id="col-title">
                                @{
                                    string styleClass = "";
                                    if (item.Status == TodoItemStatus.Completed)
                                    {
                                        styleClass = "title-table";
                                    }
                                }
                            <textarea name="title" class="b-0 c b-c-i textarea-table @styleClass" onchange="this.form.submit()" id="textareaTitle @item.Id">@item.Title</textarea>
                        </td>
                        <td id="col-description">
                            <textarea name="description" class="b-0 c b-c-i textarea-table" style="width: 100%;" onchange="this.form.submit()">@item.Description</textarea>
                        </td>
                        <td id="col-due-date">
                            <input type="date" class="b-c-i c" data-date="" data-date-format="DD MMMM YYYY" value="@item.DuetoDateTime.ToString("yyyy-MM-dd")" id="datetime" name="datetime" onchange="this.form.submit()">
                        </td>
                        <td id="col-create-date" class="c">@item.CreatedDate.ToString("dd MMMM yyyy")</td>
                        <td id="col-status">
                            <div class="form-floating select">
                                <select class="form-select b-r-4 b-c-i c status-progress" name="status" onchange="this.form.submit(); ChangeDone('flexCheckDefault @item.Id', 'selectMenuButton1 @item.Id', 'textareaTitle @item.Id', 'progressBar', '@countTask');" id="selectMenuButton1 @item.Id">
                                        @{
                                            string select = "";
                                            if (item.Status == TodoItemStatus.Completed)
                                            {
                                                select = "Completed";
                                            }
                                            else if (item.Status == TodoItemStatus.InProgress)
                                            {
                                                select = "In Progress";
                                            }
                                            else if (item.Status == TodoItemStatus.NotStarted)
                                            {
                                                select = "Not Started";
                                            }
                                        }
                                    <option value="@item.Status" hidden selected>@select</option>
                                    <option class="c-b" value="@TodoItemStatus.Completed">Completed</option>
                                    <option class="c-b" value="@TodoItemStatus.InProgress">In Progress</option>
                                    <option class="c-b" value="@TodoItemStatus.NotStarted">Not Started</option>
                                </select>
                            </div>
                        </td>
                        <input type="hidden" value="@item.Id" name="id" />
                        </form>
                        <td id="col-dotz">
                            <button class="btn btn-secondary dropdown-toggle col-dotz" type="button" id="dropdownListTable" data-bs-toggle="dropdown" aria-expanded="false">
                                <span class="material-symbols-outlined col-dotz">
                                    more_horiz
                                </span>
                            </button>
                            <ul class="dropdown-menu" aria-labelledby="dropdownListTable">
                                <li><a class="dropdown-item" href="/delete/item/@ViewBag.Id/@item.Id">Delete</a></li>
                            </ul>
                        </td>
                    </tr>
                    {
                        i++;
                    }
                }
            </tbody>
        </table>
        <div class="create-table-main">
            <div>
                <form method="post">
                    <button id="createNew" class="btn item-buttons-settings-table-main" type="submit" style="display: flex;" value=" Send" asp-controller="Home" asp-action="AddItem">
                        <div style="padding-right: 5px; padding-top: 1px;">
                            <span class="material-symbols-outlined " style="font-size: 19px;" id="addCircle2">
                                add_circle
                            </span>
                        </div>
                        Create new
                    </button>
                    <input type="hidden" name="id" value="@ViewBag.Id" />
                </form>
            </div>
        </div>
    </div>
    <iframe name="ChangeList" id="ChangeList" style="display: none;"></iframe>
    <iframe name="ChangeItem" id="ChangeItem" style="display: none;"></iframe>
    <iframe name="HiddenList" id="HiddenList" style="display: none;"></iframe>
    <iframe name="ModeChange" id="ModeChange" style="display: none;"></iframe>
</div>

@section Style {
    <link rel="stylesheet" href="~/css/main-page.css" />
    <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@48,400,0,0" />
}

    @section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-ka7Sk0Gln4gmtz2MlQnikT1wXgYsOg+OMhuP+IlRH9sENBO0LRn5q+8nbTov4+1p" crossorigin="anonymous"></script>
    <script>
        function ChangeTitleTodoList(idLable, idInput) {

            let lable = document.getElementById(idLable);
            let name = document.getElementById(idInput).value;

            lable.innerText = name;
            lable.setAttribute("style", "margin: 0px; color: #007bff;");
        }
    </script>
    <script>
        function ShowHidden(className) {
            let lists = document.getElementsByClassName(className);

            for (i = 0; i < lists.length; i++) {
                lists[i].removeAttribute("hidden");
            }
        }
    </script>
    <script>
        function HideList(idLi, idInput, idSpan, idLiDrop) {
            let li = document.getElementById(idLi);
            let input = document.getElementById(idInput);
            let span = document.getElementById(idSpan);
            let liDrop = document.getElementById(idLiDrop);

            if (liDrop.innerText == "Hide") {
                li.hidden = true;

                span.innerText = "visibility_off";

                liDrop.innerText = "Show";
            }
            else {
                li.hidden = false;

                span.innerText = "visibility";

                liDrop.innerText = "Hide";
            }

            input.click()
        }
    </script>
    <script>
        function ChangeDone(idCheckBox, idSelect, idTitle, idProgressBar, countTask) {

            let checkBox = document.getElementById(idCheckBox);
            let select = document.getElementById(idSelect).value;
            let title = document.getElementById(idTitle);

            if (select == "Completed" && checkBox.checked == false) {
                checkBox.checked = true;
                title.style.backgroundImage = "linear-gradient(to bottom, transparent calc(50% - 1px), gray, transparent calc(50% + 1px))";
            }
            else if ((select == "InProgress" && checkBox.checked == true)
                || (select == "NotStarted" && checkBox.checked == true)) {
                checkBox.checked = false;
                title.style.backgroundImage = "none";
            }

            let statusProgress = document.getElementsByClassName('status-progress');
            let progressBar = document.getElementById(idProgressBar);
            let countDone = 0;

            for (i = 0; i < statusProgress.length; i++) {
                if (statusProgress[i].value == "Completed") {
                    countDone++;
                }
            }

            var roundedZero = function (number) {
                return +number.toFixed(0);
            }

            var rounded = function (number) {
                return +number.toFixed(2);
            }

            let valueNewPB = rounded(roundedZero(countDone) * 100 / countTask);
            progressBar.ariaValueNow = valueNewPB;
            progressBar.innerText = valueNewPB + "%";
            progressBar.setAttribute("style", "width: " + valueNewPB + "%;");
        }
    </script>
    <script>
        function ChangeStatus(idCheckBox, idSelect) {

            let checkBox = document.getElementById(idCheckBox);
            let select = document.getElementById(idSelect);

            if (checkBox.checked == true) {
                select.value = "Completed";
                checkBox.checked = false;
            }
            else if (select.value != "NotStarted") {
                select.value = "InProgress";
                checkBox.checked = true;
            }


            var event = new Event('change');
            select.dispatchEvent(event);

        }
    </script>
    <script>
        $("textarea").each(function () {
            this.setAttribute("style", "height:" + (this.scrollHeight) + "px;overflow-y:hidden;");
        }).on("input", function () {
            this.style.height = 0;
            this.style.height = (this.scrollHeight) + "px";
        });
    </script>
    <script>
        function ChangeStyle() {

            let checkBox = document.getElementById('customSwitch1');
            let label = document.getElementById('labelCustomSwitch1');

            let bgColor = "#222738";
            let myBody = document.getElementById('my-body');
            let header = document.getElementById('header');
            let dropdownListUser = document.getElementById('dropdownListUser');
            let headerA = document.getElementById('headerA');
            let labelCustomSwitch1 = document.getElementById('labelCustomSwitch1');
            let headerName = document.getElementById('headerName');

            let listTitle = document.getElementById('listTitle');
            let listDescription = document.getElementById('listDescription');
            let progress = document.getElementById('progress');

            let tableMain = document.getElementById('tableMain');
            let colDone = document.getElementById('col-done');
            let colTitle = document.getElementById('col-title');
            let colDescription = document.getElementById('col-description');
            let colDueDate = document.getElementById('col-due-date');
            let colCreateDate = document.getElementById('col-create-date');
            let colStatus = document.getElementById('col-status');

            let sideMenu = document.getElementById('sideMenu');
            let c = document.getElementsByClassName('c');
            let cA = document.getElementsByClassName('c-a');
            let cB = document.getElementsByClassName('c-b');

            if (checkBox.checked == true) {
                label.innerText = "Dark Mode";
                myBody.style.backgroundColor = "#222738";
                header.style.backgroundColor = "#30384F";
                header.style.borderColor = "#30384F";
                dropdownListUser.style.backgroundColor = "#30384F";
                headerA.style.color = "#FFFFFF";
                labelCustomSwitch1.style.color = "#FFFFFF";
                headerName.style.color = "#FFFFFF";

                listTitle.style.backgroundColor = "#222738";
                listTitle.style.color = "#FFFFFF";
                listDescription.style.backgroundColor = "#222738";
                listDescription.style.color = "#FFFFFF";
                progress.style.borderWidth = "1px";
                progress.style.backgroundColor = "#222738";

                tableMain.style.backgroundColor = "#30384F";
                colDone.style.color = "#FFFFFF";
                colTitle.style.color = "#FFFFFF";
                colDescription.style.color = "#FFFFFF";
                colDueDate.style.color = "#FFFFFF";
                colCreateDate.style.color = "#FFFFFF";
                colStatus.style.color = "#FFFFFF";
                for (i = 0; i < c.length; i++) {
                    c[i].style.color = "#FFFFFF";
                }
                for (i = 0; i < cB.length; i++) {
                    cB[i].style.color = "#232D42";
                }

                sideMenu.style.backgroundColor = "#30384F";
                sideMenu.style.color = "#FFFFFF";
                for (i = 0; i < cA.length; i++) {
                    cA[i].style.color = "#FFFFFF";
                }
            }
            else {
                label.innerText = "Light Mode";
                myBody.style.backgroundColor = "#F7F7F7";
                header.style.backgroundColor = "#FFFFFF";
                header.style.borderColor = "#E9ECEF";
                dropdownListUser.style.backgroundColor = "#FFF";
                headerA.style.color = "#232D42";
                labelCustomSwitch1.style.color = "#232D42";
                headerName.style.color = "#232D42";

                listTitle.style.backgroundColor = "#F7F7F7";
                listTitle.style.color = "#232D42";
                listDescription.style.backgroundColor = "#F7F7F7";
                listDescription.style.color = "#232D42";
                progress.style.borderWidth = "0px";
                progress.style.backgroundColor = "#E9ECEF";

                tableMain.style.backgroundColor = "#FFFFFF";
                colDone.style.color = "#232D42";
                colTitle.style.color = "#232D42";
                colDescription.style.color = "#232D42";
                colDueDate.style.color = "#232D42";
                colCreateDate.style.color = "#232D42";
                colStatus.style.color = "#232D42";
                for (i = 0; i < c.length; i++) {
                    c[i].style.color = "#232D42";
                }
                for (i = 0; i < cB.length; i++) {
                    cB[i].style.color = "#232D42";
                }

                sideMenu.style.backgroundColor = "#FFFFFF";
                sideMenu.style.color = "#232D42";
                for (i = 0; i < cA.length; i++) {
                    cA[i].style.color = "#232D42";
                }
            }
        }
    </script>
    <script>
        function ChangeMode() {
            let mode = document.getElementById('mode');
            mode.click();
        }
    </script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.10.3/moment.min.js"></script>
    <script>
        $("input").on("change", function () {
            this.setAttribute(
                "data-date",
                moment(this.value, "YYYY-MM-DD")
                    .format(this.getAttribute("data-date-format"))
            )
        }).trigger("change")
    </script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script>
        const toastTrigger = document.getElementById('liveToastBtn')
        const toastLiveExample = document.getElementById('liveToast')
        if (toastTrigger) {
            toastTrigger.addEventListener('click', () => {
                const toast = new bootstrap.Toast(toastLiveExample)

                toast.show()
            })
        }
    </script>
}